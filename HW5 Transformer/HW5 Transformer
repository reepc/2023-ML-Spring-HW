{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"pygments_lexer":"ipython3","nbconvert_exporter":"python","version":"3.6.4","file_extension":".py","codemirror_mode":{"name":"ipython","version":3},"name":"python","mimetype":"text/x-python"}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"d794eb21-8f31-47c6-953a-6189f9220016","_cell_guid":"a0a45183-c402-4fad-b850-99e9df9cd5ac","collapsed":false,"jupyter":{"outputs_hidden":false},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"!git clone https://github.com/pytorch/fairseq.git\n!cd fairseq && git checkout 3f6ba43\n!pip install --upgrade ./fairseq/","metadata":{"_uuid":"e90532e8-184b-4dd7-a935-4bc5bbb5986a","_cell_guid":"961d3050-fb11-4ccc-9570-360d3cc72187","collapsed":false,"jupyter":{"outputs_hidden":false},"_kg_hide-output":true,"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import sys\nimport pdb\nimport pprint\nimport logging\nimport os\nimport random\n\nimport torch\nimport torch.nn as nn\nimport torch.nn.functional as F\nfrom torch.utils import data\nimport numpy as np\nimport tqdm.auto as tqdm\nfrom pathlib import Path\nfrom argparse import Namespace\nfrom fairseq import utils\n\nimport matplotlib.pyplot as plt","metadata":{"_uuid":"c3e6c6a7-658b-4a59-8836-c9d1a4c3b6af","_cell_guid":"905cbe2a-11dc-4d28-8f51-5e8452143515","collapsed":false,"jupyter":{"outputs_hidden":false},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"seed = 33\nnp.random.seed(seed)\nrandom.seed(seed)\ntorch.manual_seed(seed)\nif torch.cuda.is_available():\n    torch.cuda.manual_seed(seed)\n    torch.cuda.manual_seed_all(seed)  \ntorch.backends.cudnn.benchmark = False\ntorch.backends.cudnn.deterministic = True","metadata":{"_uuid":"f7addf8b-9225-4b1e-a43b-0f5b4bbe7be5","_cell_guid":"70de9e23-1e4f-4498-badd-79fc64336692","collapsed":false,"jupyter":{"outputs_hidden":false},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"data_dir = './DATA/rawdata'\ndataset_name = 'ted2020'\nurls = (\n    \"https://github.com/figisiwirf/ml2023-hw5-dataset/releases/download/v1.0.1/ml2023.hw5.data.tgz\",\n    \"https://github.com/figisiwirf/ml2023-hw5-dataset/releases/download/v1.0.1/ml2023.hw5.test.tgz\"\n)\nfile_names = (\n    'ted2020.tgz', # train & dev\n    'test.tgz', # test\n)\nprefix = Path(data_dir).absolute() / dataset_name\n\nprefix.mkdir(parents=True, exist_ok=True)\nfor u, f in zip(urls, file_names):\n    path = prefix/f\n    if not path.exists():\n        !wget {u} -O {path}\n    if path.suffix == \".tgz\":\n        !tar -xvf {path} -C {prefix}\n    elif path.suffix == \".zip\":\n        !unzip -o {path} -d {prefix}\n!mv {prefix/'raw.en'} {prefix/'train_dev.raw.en'}\n!mv {prefix/'raw.zh'} {prefix/'train_dev.raw.zh'}\n!mv {prefix/'test.en'} {prefix/'test.raw.en'}\n!mv {prefix/'test.zh'} {prefix/'test.raw.zh'}","metadata":{"_uuid":"bf6a2aff-06db-4152-9641-ca88a199ff36","_cell_guid":"e8bf7550-cd5b-48a1-b705-8cd83893504c","collapsed":false,"jupyter":{"outputs_hidden":false},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"src_lang = 'en'\ntgt_lang = 'zh'\n\ndata_prefix = f'{prefix}/train_dev.raw'\ntest_prefix = f'{prefix}/test.raw'","metadata":{"_uuid":"b5428189-4d18-4d4b-9c47-a15f24f25403","_cell_guid":"a62676c7-a663-4f3a-9cf5-8df29a3b7a4c","collapsed":false,"jupyter":{"outputs_hidden":false},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"!head {data_prefix+'.'+src_lang} -n 5\n!head {data_prefix+'.'+tgt_lang} -n 5","metadata":{"_uuid":"9a50c85f-e98f-4625-a25d-b4598a9b6b30","_cell_guid":"a2419465-dc60-41dd-bdf4-713bfc9eeb99","collapsed":false,"jupyter":{"outputs_hidden":false},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import re\n\ndef strQ2B(ustring):\n    \"\"\"Full width -> half width\"\"\"\n    # reference:https://ithelp.ithome.com.tw/articles/10233122\n    ss = []\n    for s in ustring:\n        rstring = \"\"\n        for uchar in s:\n            inside_code = ord(uchar)\n            if inside_code == 12288:  # Full width space: direct conversion\n                inside_code = 32\n            elif (inside_code >= 65281 and inside_code <= 65374):  # Full width chars (except space) conversion\n                inside_code -= 65248\n            rstring += chr(inside_code)\n        ss.append(rstring)\n    return ''.join(ss)\n                \ndef clean_s(s, lang):\n    if lang == 'en':\n        s = re.sub(r\"\\([^()]*\\)\", \"\", s) # remove ([text])\n        s = s.replace('-', '') # remove '-'\n        s = re.sub('([.,;!?()\\\"])', r' \\1 ', s) # keep punctuation\n    elif lang == 'zh':\n        s = strQ2B(s) # Q2B\n        s = re.sub(r\"\\([^()]*\\)\", \"\", s) # remove ([text])\n        s = s.replace(' ', '')\n        s = s.replace('—', '')\n        s = s.replace('“', '\"')\n        s = s.replace('”', '\"')\n        s = s.replace('_', '')\n        s = re.sub('([。,;!?()\\\"~「」])', r' \\1 ', s) # keep punctuation\n    s = ' '.join(s.strip().split())\n    return s\n\ndef len_s(s, lang):\n    if lang == 'zh':\n        return len(s)\n    return len(s.split())\n\ndef clean_corpus(prefix, l1, l2, ratio=9, max_len=1000, min_len=1):\n    if Path(f'{prefix}.clean.{l1}').exists() and Path(f'{prefix}.clean.{l2}').exists():\n        print(f'{prefix}.clean.{l1} & {l2} exists. skipping clean.')\n        return\n    with open(f'{prefix}.{l1}', 'r') as l1_in_f:\n        with open(f'{prefix}.{l2}', 'r') as l2_in_f:\n            with open(f'{prefix}.clean.{l1}', 'w') as l1_out_f:\n                with open(f'{prefix}.clean.{l2}', 'w') as l2_out_f:\n                    for s1 in l1_in_f:\n                        s1 = s1.strip()\n                        s2 = l2_in_f.readline().strip()\n                        s1 = clean_s(s1, l1)\n                        s2 = clean_s(s2, l2)\n                        s1_len = len_s(s1, l1)\n                        s2_len = len_s(s2, l2)\n                        if min_len > 0: # remove short sentence\n                            if s1_len < min_len or s2_len < min_len:\n                                continue\n                        if max_len > 0: # remove long sentence\n                            if s1_len > max_len or s2_len > max_len:\n                                continue\n                        if ratio > 0: # remove by ratio of length\n                            if s1_len/s2_len > ratio or s2_len/s1_len > ratio:\n                                continue\n                        print(s1, file=l1_out_f)\n                        print(s2, file=l2_out_f)","metadata":{"_uuid":"1286352f-98e0-469e-852e-567b44630c62","_cell_guid":"86c0cb7f-dc41-4a59-b420-90c547630bbd","collapsed":false,"jupyter":{"outputs_hidden":false},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"clean_corpus(data_prefix, src_lang, tgt_lang)\nclean_corpus(test_prefix, src_lang, tgt_lang, ratio=-1, min_len=-1, max_len=-1)","metadata":{"_uuid":"0527abf1-987e-435a-9635-dcffbdac5ebc","_cell_guid":"f8e72e2b-51f2-4060-9a44-2d262bcbb435","collapsed":false,"jupyter":{"outputs_hidden":false},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"!head {data_prefix+'.clean.'+src_lang} -n 5\n!head {data_prefix+'.clean.'+tgt_lang} -n 5","metadata":{"_uuid":"bad4ddc2-1b56-408b-8687-2432e678c31a","_cell_guid":"f2c4f653-0334-4ad3-8144-921885a67ceb","collapsed":false,"jupyter":{"outputs_hidden":false},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"valid_ratio = 0.01 # 3000~4000 would suffice\ntrain_ratio = 1 - valid_ratio","metadata":{"_uuid":"74b0f448-67a0-4463-9dda-808defe3bc5c","_cell_guid":"2508661b-7630-4e49-aab6-3f4a54cbd75e","collapsed":false,"jupyter":{"outputs_hidden":false},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"if (prefix/f'train.clean.{src_lang}').exists() \\\nand (prefix/f'train.clean.{tgt_lang}').exists() \\\nand (prefix/f'valid.clean.{src_lang}').exists() \\\nand (prefix/f'valid.clean.{tgt_lang}').exists():\n    print(f'train/valid splits exists. skipping split.')\nelse:\n    line_num = sum(1 for line in open(f'{data_prefix}.clean.{src_lang}'))\n    labels = list(range(line_num))\n    random.shuffle(labels)\n    for lang in [src_lang, tgt_lang]:\n        train_f = open(os.path.join(data_dir, dataset_name, f'train.clean.{lang}'), 'w')\n        valid_f = open(os.path.join(data_dir, dataset_name, f'valid.clean.{lang}'), 'w')\n        count = 0\n        for line in open(f'{data_prefix}.clean.{lang}', 'r'):\n            if labels[count]/line_num < train_ratio:\n                train_f.write(line)\n            else:\n                valid_f.write(line)\n            count += 1\n        train_f.close()\n        valid_f.close()","metadata":{"_uuid":"be8a69ef-aa77-4058-9f30-47064a537c16","_cell_guid":"3158b750-f776-4274-ab25-950fa9ee01f2","collapsed":false,"jupyter":{"outputs_hidden":false},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import sentencepiece as spm\nvocab_size = 8000\nif (prefix/f'spm{vocab_size}.model').exists():\n    print(f'{prefix}/spm{vocab_size}.model exists. skipping spm_train.')\nelse:\n    spm.SentencePieceTrainer.train(\n        input=','.join([f'{prefix}/train.clean.{src_lang}',\n                        f'{prefix}/valid.clean.{src_lang}',\n                        f'{prefix}/train.clean.{tgt_lang}',\n                        f'{prefix}/valid.clean.{tgt_lang}']),\n        model_prefix=prefix/f'spm{vocab_size}',\n        vocab_size=vocab_size,\n        character_coverage=1,\n        model_type='unigram', # 'bpe' works as well\n        input_sentence_size=1e6,\n        shuffle_input_sentence=True,\n        normalization_rule_name='nmt_nfkc_cf',\n    )","metadata":{"_uuid":"01820e96-9484-41bf-8a06-043447de6efc","_cell_guid":"0cc60d68-eb88-4271-8781-cc1fe547e23d","collapsed":false,"jupyter":{"outputs_hidden":false},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"spm_model = spm.SentencePieceProcessor(model_file=str(prefix/f'spm{vocab_size}.model'))\nin_tag = {\n    'train': 'train.clean',\n    'valid': 'valid.clean',\n    'test': 'test.raw.clean',\n}\nfor split in ['train', 'valid', 'test']:\n    for lang in [src_lang, tgt_lang]:\n        out_path = prefix/f'{split}.{lang}'\n        if out_path.exists():\n            print(f\"{out_path} exists. skipping spm_encode.\")\n        else:\n            with open(prefix/f'{split}.{lang}', 'w') as out_f:\n                with open(prefix/f'{in_tag[split]}.{lang}', 'r') as in_f:\n                    for line in in_f:\n                        line = line.strip()\n                        tok = spm_model.encode(line, out_type=str)\n                        print(' '.join(tok), file=out_f)","metadata":{"_uuid":"e9dda85d-862e-4339-83ea-a67ae524f7c5","_cell_guid":"63a8e2b6-6c3a-4ae4-bfb9-7539920bb27a","collapsed":false,"jupyter":{"outputs_hidden":false},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"binpath = Path('./DATA/data-bin', dataset_name)\nif binpath.exists():\n    print(binpath, \"exists, will not overwrite!\")\nelse:\n    !python -m fairseq_cli.preprocess \\\n        --source-lang {src_lang}\\\n        --target-lang {tgt_lang}\\\n        --trainpref {prefix/'train'}\\\n        --validpref {prefix/'valid'}\\\n        --testpref {prefix/'test'}\\\n        --destdir {binpath}\\\n        --joined-dictionary\\\n        --workers 2","metadata":{"_uuid":"9fdba365-79a3-4281-8f8c-418640bf7941","_cell_guid":"78720622-1440-4e09-8be2-ce6a931fceca","collapsed":false,"jupyter":{"outputs_hidden":false},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"config = Namespace(\n    datadir = \"./DATA/data-bin/ted2020\",\n    savedir = \"./checkpoints/rnn\",\n    source_lang = src_lang,\n    target_lang = tgt_lang,\n    \n    # cpu threads when fetching & processing data.\n    num_workers=2,  \n    # batch size in terms of tokens. gradient accumulation increases the effective batchsize.\n    max_tokens=8192,\n    accum_steps=2,\n    \n    # the lr s calculated from Noam lr scheduler. you can tune the maximum lr by this factor.\n    lr_factor=2.,\n    lr_warmup=4000,\n    \n    # clipping gradient norm helps alleviate gradient exploding\n    clip_norm=1.0,\n    \n    # maximum epochs for training\n    max_epoch=30,\n    start_epoch=1,\n    \n    # beam size for beam search\n    beam=5, \n    # generate sequences of maximum length ax + b, where x is the source length\n    max_len_a=1.2, \n    max_len_b=10, \n    # when decoding, post process sentence by removing sentencepiece symbols and jieba tokenization.\n    post_process = \"sentencepiece\",\n    \n    # checkpoints\n    keep_last_epochs=5,\n    resume=None, # if resume from checkpoint name (under config.savedir)\n    \n    # logging\n    use_wandb=False,\n)","metadata":{"_uuid":"25539f93-49ed-4599-b9f5-aa24e8102941","_cell_guid":"cb345e81-1b3a-4e2d-8b65-a0ef4738fd4e","collapsed":false,"jupyter":{"outputs_hidden":false},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"logging.basicConfig(\n    format=\"%(asctime)s | %(levelname)s | %(name)s | %(message)s\",\n    datefmt=\"%Y-%m-%d %H:%M:%S\",\n    level=\"INFO\", # \"DEBUG\" \"WARNING\" \"ERROR\"\n    stream=sys.stdout,\n)\nproj = \"hw5.seq2seq\"\nlogger = logging.getLogger(proj)\nif config.use_wandb:\n    import wandb\n    wandb.init(project=proj, name=Path(config.savedir).stem, config=config)","metadata":{"_uuid":"83cc6bd4-375e-4de8-b97f-80a1d5988a61","_cell_guid":"f31ad9b6-08fc-4ba5-8898-210983e0f85e","collapsed":false,"jupyter":{"outputs_hidden":false},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"cuda_env = utils.CudaEnvironment()\nutils.CudaEnvironment.pretty_print_cuda_env_list([cuda_env])\ndevice = torch.device('cuda:0' if torch.cuda.is_available() else 'cpu')","metadata":{"_uuid":"40f75add-3478-45b0-8b4c-4db7627fb453","_cell_guid":"4c5b70cd-0ac4-4564-b2d1-b40dafefda3c","collapsed":false,"jupyter":{"outputs_hidden":false},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"from fairseq.tasks.translation import TranslationConfig, TranslationTask\n\n## setup task\ntask_cfg = TranslationConfig(\n    data=config.datadir,\n    source_lang=config.source_lang,\n    target_lang=config.target_lang,\n    train_subset=\"train\",\n    required_seq_len_multiple=8,\n    dataset_impl=\"mmap\",\n    upsample_primary=1,\n)\ntask = TranslationTask.setup_task(task_cfg)","metadata":{"_uuid":"24999890-8986-46bb-b2fa-763f9f262c9a","_cell_guid":"f1b29731-b508-483d-96cd-708b66450163","collapsed":false,"jupyter":{"outputs_hidden":false},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"logger.info(\"loading data for epoch 1\")\ntask.load_dataset(split=\"train\", epoch=1, combine=True) # combine if you have back-translation data.\ntask.load_dataset(split=\"valid\", epoch=1)","metadata":{"_uuid":"f1d498c0-0514-4bf8-abc2-800f73fd54d1","_cell_guid":"f0de2f49-e7c5-412a-bc48-085047f6ba56","collapsed":false,"jupyter":{"outputs_hidden":false},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"sample = task.dataset(\"valid\")[1]\npprint.pprint(sample)\npprint.pprint(\n    \"Source: \" + \\\n    task.source_dictionary.string(\n        sample['source'],\n        config.post_process,\n    )\n)\npprint.pprint(\n    \"Target: \" + \\\n    task.target_dictionary.string(\n        sample['target'],\n        config.post_process,\n    )\n)","metadata":{"_uuid":"37947d2c-88ce-42ec-bf14-edb10c07638a","_cell_guid":"c6a1d92e-0e6b-4b8f-852c-7bd19a89af50","collapsed":false,"jupyter":{"outputs_hidden":false},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"def load_data_iterator(task, split, epoch=1, max_tokens=4000, num_workers=1, cached=True):\n    batch_iterator = task.get_batch_iterator(\n        dataset=task.dataset(split),\n        max_tokens=max_tokens,\n        max_sentences=None,\n        max_positions=utils.resolve_max_positions(\n            task.max_positions(),\n            max_tokens,\n        ),\n        ignore_invalid_inputs=True,\n        seed=seed,\n        num_workers=num_workers,\n        epoch=epoch,\n        disable_iterator_cache=not cached,\n        # Set this to False to speed up. However, if set to False, changing max_tokens beyond \n        # first call of this method has no effect. \n    )\n    return batch_iterator\n\ndemo_epoch_obj = load_data_iterator(task, \"valid\", epoch=1, max_tokens=20, num_workers=1, cached=False)\ndemo_iter = demo_epoch_obj.next_epoch_itr(shuffle=True)\nsample = next(demo_iter)\nsample","metadata":{"_uuid":"f9a26261-b6a3-4809-a828-025a9417c2dd","_cell_guid":"a9c0185a-1292-4e78-84dd-767acc007d19","collapsed":false,"jupyter":{"outputs_hidden":false},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"from fairseq.models import (\n    FairseqEncoder,\n    FairseqIncrementalDecoder,\n    FairseqEncoderDecoderModel\n)","metadata":{"_uuid":"b04d1847-5fb2-4868-a62b-829501037e94","_cell_guid":"f8477135-5d70-4eed-abba-1f5915f227e2","collapsed":false,"jupyter":{"outputs_hidden":false},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# RNNEncoder","metadata":{}},{"cell_type":"code","source":"class RNNEncoder(FairseqEncoder):\n    def __init__(self, args, dictionary, embed_tokens):\n        super().__init__(dictionary)\n        self.embed_tokens = embed_tokens\n        \n        self.embed_dim = args.encoder_embed_dim\n        self.hidden_dim = args.encoder_ffn_embed_dim\n        self.num_layers = args.encoder_layers\n        \n        self.dropout_in_module = nn.Dropout(args.dropout)\n        self.rnn = nn.GRU(\n            self.embed_dim, \n            self.hidden_dim, \n            self.num_layers, \n            dropout=args.dropout, \n            batch_first=False, \n            bidirectional=True\n        )\n        self.dropout_out_module = nn.Dropout(args.dropout)\n        \n        self.padding_idx = dictionary.pad()\n        \n    def combine_bidir(self, outs, bsz: int):\n        out = outs.view(self.num_layers, 2, bsz, -1).transpose(1, 2).contiguous()\n        return out.view(self.num_layers, bsz, -1)\n\n    def forward(self, src_tokens, **unused):\n        bsz, seqlen = src_tokens.size()\n        \n        # get embeddings\n        x = self.embed_tokens(src_tokens)\n        x = self.dropout_in_module(x)\n\n        # B x T x C -> T x B x C\n        x = x.transpose(0, 1)\n        \n        # pass thru bidirectional RNN\n        h0 = x.new_zeros(2 * self.num_layers, bsz, self.hidden_dim)\n        x, final_hiddens = self.rnn(x, h0)\n        outputs = self.dropout_out_module(x)\n        # outputs = [sequence len, batch size, hid dim * directions]\n        # hidden =  [num_layers * directions, batch size  , hid dim]\n        \n        # Since Encoder is bidirectional, we need to concatenate the hidden states of two directions\n        final_hiddens = self.combine_bidir(final_hiddens, bsz)\n        # hidden =  [num_layers x batch x num_directions*hidden]\n        \n        encoder_padding_mask = src_tokens.eq(self.padding_idx).t()\n        return tuple(\n            (\n                outputs,  # seq_len x batch x hidden\n                final_hiddens,  # num_layers x batch x num_directions*hidden\n                encoder_padding_mask,  # seq_len x batch\n            )\n        )\n    \n    def reorder_encoder_out(self, encoder_out, new_order):\n        # This is used by fairseq's beam search. How and why is not particularly important here.\n        return tuple(\n            (\n                encoder_out[0].index_select(1, new_order),\n                encoder_out[1].index_select(1, new_order),\n                encoder_out[2].index_select(1, new_order),\n            )\n        )","metadata":{"_uuid":"c4f0aac6-c023-4bce-8beb-9e5c1b3b2e3d","_cell_guid":"3cfae76d-902e-4621-a6e4-dd6c3b302e74","collapsed":false,"jupyter":{"outputs_hidden":false},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Attention Layer","metadata":{}},{"cell_type":"code","source":"class AttentionLayer(nn.Module):\n    def __init__(self, input_embed_dim, source_embed_dim, output_embed_dim, bias=False):\n        super().__init__()\n\n        self.input_proj = nn.Linear(input_embed_dim, source_embed_dim, bias=bias)\n        self.output_proj = nn.Linear(\n            input_embed_dim + source_embed_dim, output_embed_dim, bias=bias\n        )\n\n    def forward(self, inputs, encoder_outputs, encoder_padding_mask):\n        # inputs: T, B, dim\n        # encoder_outputs: S x B x dim\n        # padding mask:  S x B\n        \n        # convert all to batch first\n        inputs = inputs.transpose(1,0) # B, T, dim\n        encoder_outputs = encoder_outputs.transpose(1,0) # B, S, dim\n        encoder_padding_mask = encoder_padding_mask.transpose(1,0) # B, S\n        \n        # project to the dimensionality of encoder_outputs\n        x = self.input_proj(inputs)\n\n        # compute attention\n        # (B, T, dim) x (B, dim, S) = (B, T, S)\n        attn_scores = torch.bmm(x, encoder_outputs.transpose(1,2))\n\n        # cancel the attention at positions corresponding to padding\n        if encoder_padding_mask is not None:\n            # leveraging broadcast  B, S -> (B, 1, S)\n            encoder_padding_mask = encoder_padding_mask.unsqueeze(1)\n            attn_scores = (\n                attn_scores.float()\n                .masked_fill_(encoder_padding_mask, float(\"-inf\"))\n                .type_as(attn_scores)\n            )  # FP16 support: cast to float and back\n\n        # softmax on the dimension corresponding to source sequence\n        attn_scores = F.softmax(attn_scores, dim=-1)\n\n        # shape (B, T, S) x (B, S, dim) = (B, T, dim) weighted sum\n        x = torch.bmm(attn_scores, encoder_outputs)\n\n        # (B, T, dim)\n        x = torch.cat((x, inputs), dim=-1)\n        x = torch.tanh(self.output_proj(x)) # concat + linear + tanh\n        \n        # restore shape (B, T, dim) -> (T, B, dim)\n        return x.transpose(1,0), attn_scores","metadata":{"_uuid":"906d020f-0080-46cc-889b-c409d1fa85ce","_cell_guid":"8d586503-0864-4894-aa60-522506e7a8d5","collapsed":false,"jupyter":{"outputs_hidden":false},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# RNNDecoder","metadata":{}},{"cell_type":"code","source":"class RNNDecoder(FairseqIncrementalDecoder):\n    def __init__(self, args, dictionary, embed_tokens):\n        super().__init__(dictionary)\n        self.embed_tokens = embed_tokens\n        \n        assert args.decoder_layers == args.encoder_layers, f\"\"\"seq2seq rnn requires that encoder \n        and decoder have same layers of rnn. got: {args.encoder_layers, args.decoder_layers}\"\"\"\n        assert args.decoder_ffn_embed_dim == args.encoder_ffn_embed_dim*2, f\"\"\"seq2seq-rnn requires \n        that decoder hidden to be 2*encoder hidden dim. got: {args.decoder_ffn_embed_dim, args.encoder_ffn_embed_dim*2}\"\"\"\n        \n        self.embed_dim = args.decoder_embed_dim\n        self.hidden_dim = args.decoder_ffn_embed_dim\n        self.num_layers = args.decoder_layers\n        \n        \n        self.dropout_in_module = nn.Dropout(args.dropout)\n        self.rnn = nn.GRU(\n            self.embed_dim, \n            self.hidden_dim, \n            self.num_layers, \n            dropout=args.dropout, \n            batch_first=False, \n            bidirectional=False\n        )\n        self.attention = AttentionLayer(\n            self.embed_dim, self.hidden_dim, self.embed_dim, bias=False\n        ) \n        # self.attention = None\n        self.dropout_out_module = nn.Dropout(args.dropout)\n        \n        if self.hidden_dim != self.embed_dim:\n            self.project_out_dim = nn.Linear(self.hidden_dim, self.embed_dim)\n        else:\n            self.project_out_dim = None\n        \n        if args.share_decoder_input_output_embed:\n            self.output_projection = nn.Linear(\n                self.embed_tokens.weight.shape[1],\n                self.embed_tokens.weight.shape[0],\n                bias=False,\n            )\n            self.output_projection.weight = self.embed_tokens.weight\n        else:\n            self.output_projection = nn.Linear(\n                self.output_embed_dim, len(dictionary), bias=False\n            )\n            nn.init.normal_(\n                self.output_projection.weight, mean=0, std=self.output_embed_dim ** -0.5\n            )\n        \n    def forward(self, prev_output_tokens, encoder_out, incremental_state=None, **unused):\n        # extract the outputs from encoder\n        encoder_outputs, encoder_hiddens, encoder_padding_mask = encoder_out\n        # outputs:          seq_len x batch x num_directions*hidden\n        # encoder_hiddens:  num_layers x batch x num_directions*encoder_hidden\n        # padding_mask:     seq_len x batch\n        \n        if incremental_state is not None and len(incremental_state) > 0:\n            # if the information from last timestep is retained, we can continue from there instead of starting from bos\n            prev_output_tokens = prev_output_tokens[:, -1:]\n            cache_state = self.get_incremental_state(incremental_state, \"cached_state\")\n            prev_hiddens = cache_state[\"prev_hiddens\"]\n        else:\n            # incremental state does not exist, either this is training time, or the first timestep of test time\n            # prepare for seq2seq: pass the encoder_hidden to the decoder hidden states\n            prev_hiddens = encoder_hiddens\n        \n        bsz, seqlen = prev_output_tokens.size()\n        \n        # embed tokens\n        x = self.embed_tokens(prev_output_tokens)\n        x = self.dropout_in_module(x)\n\n        # B x T x C -> T x B x C\n        x = x.transpose(0, 1)\n                \n        # decoder-to-encoder attention\n        if self.attention is not None:\n            x, attn = self.attention(x, encoder_outputs, encoder_padding_mask)\n                        \n        # pass thru unidirectional RNN\n        x, final_hiddens = self.rnn(x, prev_hiddens)\n        # outputs = [sequence len, batch size, hid dim]\n        # hidden =  [num_layers * directions, batch size  , hid dim]\n        x = self.dropout_out_module(x)\n                \n        # project to embedding size (if hidden differs from embed size, and share_embedding is True, \n        # we need to do an extra projection)\n        if self.project_out_dim != None:\n            x = self.project_out_dim(x)\n        \n        # project to vocab size\n        x = self.output_projection(x)\n        \n        # T x B x C -> B x T x C\n        x = x.transpose(1, 0)\n        \n        # if incremental, record the hidden states of current timestep, which will be restored in the next timestep\n        cache_state = {\n            \"prev_hiddens\": final_hiddens,\n        }\n        self.set_incremental_state(incremental_state, \"cached_state\", cache_state)\n        \n        return x, None\n    \n    def reorder_incremental_state(\n        self,\n        incremental_state,\n        new_order,\n    ):\n        # This is used by fairseq's beam search. How and why is not particularly important here.\n        cache_state = self.get_incremental_state(incremental_state, \"cached_state\")\n        prev_hiddens = cache_state[\"prev_hiddens\"]\n        prev_hiddens = [p.index_select(0, new_order) for p in prev_hiddens]\n        cache_state = {\n            \"prev_hiddens\": torch.stack(prev_hiddens),\n        }\n        self.set_incremental_state(incremental_state, \"cached_state\", cache_state)\n        return","metadata":{"_uuid":"6bfce517-15f2-49cf-89c4-1df2ed6a13b8","_cell_guid":"f5f1f865-ccdb-488f-8434-2ad4b3433325","collapsed":false,"jupyter":{"outputs_hidden":false},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Seq2seq","metadata":{}},{"cell_type":"code","source":"class Seq2Seq(FairseqEncoderDecoderModel):\n    def __init__(self, args, encoder, decoder):\n        super().__init__(encoder, decoder)\n        self.args = args\n    \n    def forward(\n        self,\n        src_tokens,\n        src_lengths,\n        prev_output_tokens,\n        return_all_hiddens: bool = True,\n    ):\n        \"\"\"\n        Run the forward pass for an encoder-decoder model.\n        \"\"\"\n        encoder_out = self.encoder(\n            src_tokens, src_lengths=src_lengths, return_all_hiddens=return_all_hiddens\n        )\n        logits, extra = self.decoder(\n            prev_output_tokens,\n            encoder_out=encoder_out,\n            src_lengths=src_lengths,\n            return_all_hiddens=return_all_hiddens,\n        )\n        return logits, extra","metadata":{"_uuid":"8ee42e25-4452-4f0d-b4c6-d26d7512fb56","_cell_guid":"53ccb570-3f0a-4368-a945-390a58f7e765","collapsed":false,"jupyter":{"outputs_hidden":false},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# # HINT: transformer architecture\nfrom fairseq.models.transformer import (\n    TransformerEncoder, \n    TransformerDecoder,\n)\n\ndef build_model(args, task):\n    \"\"\" build a model instance based on hyperparameters \"\"\"\n    src_dict, tgt_dict = task.source_dictionary, task.target_dictionary\n\n    # token embeddings\n    encoder_embed_tokens = nn.Embedding(len(src_dict), args.encoder_embed_dim, src_dict.pad())\n    decoder_embed_tokens = nn.Embedding(len(tgt_dict), args.decoder_embed_dim, tgt_dict.pad())\n    \n    # encoder decoder\n    # HINT: TODO: switch to TransformerEncoder & TransformerDecoder\n    # encoder = RNNEncoder(args, src_dict, encoder_embed_tokens)\n    # decoder = RNNDecoder(args, tgt_dict, decoder_embed_tokens)\n    encoder = TransformerEncoder(args, src_dict, encoder_embed_tokens)\n    decoder = TransformerDecoder(args, tgt_dict, decoder_embed_tokens)\n\n    # sequence to sequence model\n    model = Seq2Seq(args, encoder, decoder)\n    \n    # initialization for seq2seq model is important, requires extra handling\n    def init_params(module):\n        from fairseq.modules import MultiheadAttention\n        if isinstance(module, nn.Linear):\n            module.weight.data.normal_(mean=0.0, std=0.02)\n            if module.bias is not None:\n                module.bias.data.zero_()\n        if isinstance(module, nn.Embedding):\n            module.weight.data.normal_(mean=0.0, std=0.02)\n            if module.padding_idx is not None:\n                module.weight.data[module.padding_idx].zero_()\n        if isinstance(module, MultiheadAttention):\n            module.q_proj.weight.data.normal_(mean=0.0, std=0.02)\n            module.k_proj.weight.data.normal_(mean=0.0, std=0.02)\n            module.v_proj.weight.data.normal_(mean=0.0, std=0.02)\n        if isinstance(module, nn.RNNBase):\n            for name, param in module.named_parameters():\n                if \"weight\" in name or \"bias\" in name:\n                    param.data.uniform_(-0.1, 0.1)\n            \n    # weight initialization\n    model.apply(init_params)\n    return model","metadata":{"_uuid":"81ae5025-2aa6-44cd-a4df-2d7deb623c9c","_cell_guid":"29b33196-7ce6-4384-951f-fe9e96ec9ea9","collapsed":false,"jupyter":{"outputs_hidden":false},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"arch_args = Namespace(\n    encoder_embed_dim=256,\n    encoder_ffn_embed_dim=1024,\n    encoder_layers=5,\n    decoder_embed_dim=512,\n    decoder_ffn_embed_dim=1024,\n    decoder_layers=5,\n    share_decoder_input_output_embed=True,\n    dropout=0.3,\n)\n\n# HINT: these patches on parameters for Transformer\ndef add_transformer_args(args):\n    args.encoder_attention_heads=5\n    args.encoder_normalize_before=True\n    \n    args.decoder_attention_heads=5\n    args.decoder_normalize_before=True\n    \n    args.activation_fn=\"relu\"\n    args.max_source_positions=1024\n    args.max_target_positions=1024\n    \n    # patches on default parameters for Transformer (those not set above)\n    from fairseq.models.transformer import base_architecture\n    base_architecture(arch_args)\n\n# add_transformer_args(arch_args)","metadata":{"_uuid":"e1ea2120-89c2-4e77-b8de-ff0de6d98569","_cell_guid":"5c967b79-5a26-4e52-8f5f-7b4dded9e0f2","collapsed":false,"jupyter":{"outputs_hidden":false},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"if config.use_wandb:\n    wandb.config.update(vars(arch_args))","metadata":{"_uuid":"21970cdc-6e98-424e-b6aa-64c6f17ed092","_cell_guid":"d509feda-1d36-4609-8378-8718c280ba98","collapsed":false,"jupyter":{"outputs_hidden":false},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"model = build_model(arch_args, task)\nlogger.info(model)","metadata":{"_uuid":"0e86ba81-9f1c-40a0-bf6c-28eaf89fe1ef","_cell_guid":"5fab631d-9a1b-4d9c-9896-482280859890","collapsed":false,"jupyter":{"outputs_hidden":false},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"class LabelSmoothedCrossEntropyCriterion(nn.Module):\n    def __init__(self, smoothing, ignore_index=None, reduce=True):\n        super().__init__()\n        self.smoothing = smoothing\n        self.ignore_index = ignore_index\n        self.reduce = reduce\n    \n    def forward(self, lprobs, target):\n        if target.dim() == lprobs.dim() - 1:\n            target = target.unsqueeze(-1)\n        # nll: Negative log likelihood，the cross-entropy when target is one-hot. following line is same as F.nll_loss\n        nll_loss = -lprobs.gather(dim=-1, index=target)\n        #  reserve some probability for other labels. thus when calculating cross-entropy, \n        # equivalent to summing the log probs of all labels\n        smooth_loss = -lprobs.sum(dim=-1, keepdim=True)\n        if self.ignore_index is not None:\n            pad_mask = target.eq(self.ignore_index)\n            nll_loss.masked_fill_(pad_mask, 0.0)\n            smooth_loss.masked_fill_(pad_mask, 0.0)\n        else:\n            nll_loss = nll_loss.squeeze(-1)\n            smooth_loss = smooth_loss.squeeze(-1)\n        if self.reduce:\n            nll_loss = nll_loss.sum()\n            smooth_loss = smooth_loss.sum()\n        # when calculating cross-entropy, add the loss of other labels\n        eps_i = self.smoothing / lprobs.size(-1)\n        loss = (1.0 - self.smoothing) * nll_loss + eps_i * smooth_loss\n        return loss\n\n# generally, 0.1 is good enough\ncriterion = LabelSmoothedCrossEntropyCriterion(\n    smoothing=0.1,\n    ignore_index=task.target_dictionary.pad(),\n)","metadata":{"_uuid":"b75eefb3-6f19-42ce-9f5f-04852530c391","_cell_guid":"277671f4-18a4-415c-8b36-8462f8f4ecee","collapsed":false,"jupyter":{"outputs_hidden":false},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Learning Rate","metadata":{}},{"cell_type":"code","source":"def get_rate(d_model, step_num, warmup_steps):\n    # FINISH: Change lr from constant to the equation shown above\n    lr = d_model ** (-0.5) * min(step_num ** -0.5, step_num * warmup_steps ** -1.5)\n    return lr","metadata":{"_uuid":"926d8795-abfd-42e6-96a5-acdf1a742f60","_cell_guid":"59b0ab81-6477-4540-a737-6de55a8fb592","collapsed":false,"jupyter":{"outputs_hidden":false},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"class NoamOpt:\n    \"Optim wrapper that implements rate.\"\n    def __init__(self, model_size, factor, warmup, optimizer):\n        self.optimizer = optimizer\n        self._step = 0\n        self.warmup = warmup\n        self.factor = factor\n        self.model_size = model_size\n        self._rate = 0\n    \n    @property\n    def param_groups(self):\n        return self.optimizer.param_groups\n        \n    def multiply_grads(self, c):\n        \"\"\"Multiplies grads by a constant *c*.\"\"\"                \n        for group in self.param_groups:\n            for p in group['params']:\n                if p.grad is not None:\n                    p.grad.data.mul_(c)\n        \n    def step(self):\n        \"Update parameters and rate\"\n        self._step += 1\n        rate = self.rate()\n        for p in self.param_groups:\n            p['lr'] = rate\n        self._rate = rate\n        self.optimizer.step()\n        \n    def rate(self, step = None):\n        \"Implement `lrate` above\"\n        if step is None:\n            step = self._step\n        return 0 if not step else self.factor * get_rate(self.model_size, step, self.warmup)","metadata":{"_uuid":"d0b0f52e-1ed8-4aca-a913-b3ca770dbd0f","_cell_guid":"6c577e84-adb4-440e-aec4-407f1d46235d","collapsed":false,"jupyter":{"outputs_hidden":false},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"optimizer = NoamOpt(\n    model_size=arch_args.encoder_embed_dim, \n    factor=config.lr_factor, \n    warmup=config.lr_warmup, \n    optimizer=torch.optim.AdamW(model.parameters(), lr=0, betas=(0.9, 0.98), eps=1e-9, weight_decay=0.0001))\nplt.plot(np.arange(1, 100000), [optimizer.rate(i) for i in range(1, 100000)])\nplt.legend([f\"{optimizer.model_size}:{optimizer.warmup}\"])\nNone","metadata":{"_uuid":"76836413-eb04-4f36-852a-aedbda5567a0","_cell_guid":"0ed0a29b-cfab-4da3-9e1d-130e85758a25","collapsed":false,"jupyter":{"outputs_hidden":false},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Train","metadata":{}},{"cell_type":"code","source":"from fairseq.data import iterators\nfrom torch.cuda.amp import GradScaler, autocast\n\ndef train_one_epoch(epoch_itr, model, task, criterion, optimizer, accum_steps=1):\n    itr = epoch_itr.next_epoch_itr(shuffle=True)\n    itr = iterators.GroupedIterator(itr, accum_steps) # gradient accumulation: update every accum_steps samples\n    \n    stats = {\"loss\": []}\n    scaler = GradScaler() # automatic mixed precision (amp) \n    \n    model.train()\n    progress = tqdm.tqdm(itr, desc=f\"train epoch {epoch_itr.epoch}\", leave=False)\n    for samples in progress:\n        model.zero_grad()\n        accum_loss = 0\n        sample_size = 0\n        # gradient accumulation: update every accum_steps samples\n        for i, sample in enumerate(samples):\n            if i == 1:\n                # emptying the CUDA cache after the first step can reduce the chance of OOM\n                torch.cuda.empty_cache()\n\n            sample = utils.move_to_cuda(sample, device=device)\n            target = sample[\"target\"]\n            sample_size_i = sample[\"ntokens\"]\n            sample_size += sample_size_i\n            \n            # mixed precision training\n            with autocast():\n                net_output = model.forward(**sample[\"net_input\"])\n                lprobs = F.log_softmax(net_output[0], -1)            \n                loss = criterion(lprobs.view(-1, lprobs.size(-1)), target.view(-1))\n                \n                # logging\n                accum_loss += loss.item()\n                # back-prop\n                scaler.scale(loss).backward()                \n        \n        scaler.unscale_(optimizer)\n        optimizer.multiply_grads(1 / (sample_size or 1.0)) # (sample_size or 1.0) handles the case of a zero gradient\n        gnorm = nn.utils.clip_grad_norm_(model.parameters(), config.clip_norm) # grad norm clipping prevents gradient exploding\n        \n        scaler.step(optimizer)\n        scaler.update()\n        \n        # logging\n        loss_print = accum_loss/sample_size\n        stats[\"loss\"].append(loss_print)\n        progress.set_postfix(loss=loss_print)\n        if config.use_wandb:\n            wandb.log({\n                \"train/loss\": loss_print,\n                \"train/grad_norm\": gnorm.item(),\n                \"train/lr\": optimizer.rate(),\n                \"train/sample_size\": sample_size,\n            })\n        \n    loss_print = np.mean(stats[\"loss\"])\n    logger.info(f\"training loss: {loss_print:.4f}\")\n    return stats","metadata":{"_uuid":"5f46b97b-5132-4bc0-bf4f-b5329280e32b","_cell_guid":"759838ee-3254-4b87-a6c5-2136c8cf490f","collapsed":false,"jupyter":{"outputs_hidden":false},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# fairseq's beam search generator\n# given model and input seqeunce, produce translation hypotheses by beam search\nsequence_generator = task.build_generator([model], config)\n\ndef decode(toks, dictionary):\n    # convert from Tensor to human readable sentence\n    s = dictionary.string(\n        toks.int().cpu(),\n        config.post_process,\n    )\n    return s if s else \"<unk>\"\n\ndef inference_step(sample, model):\n    gen_out = sequence_generator.generate([model], sample)\n    srcs = []\n    hyps = []\n    refs = []\n    for i in range(len(gen_out)):\n        # for each sample, collect the input, hypothesis and reference, later be used to calculate BLEU\n        srcs.append(decode(\n            utils.strip_pad(sample[\"net_input\"][\"src_tokens\"][i], task.source_dictionary.pad()), \n            task.source_dictionary,\n        ))\n        hyps.append(decode(\n            gen_out[i][0][\"tokens\"], # 0 indicates using the top hypothesis in beam\n            task.target_dictionary,\n        ))\n        refs.append(decode(\n            utils.strip_pad(sample[\"target\"][i], task.target_dictionary.pad()), \n            task.target_dictionary,\n        ))\n    return srcs, hyps, refs","metadata":{"_uuid":"98d62bcd-a782-4b1f-8f8a-2e1e32ca85cf","_cell_guid":"0a797869-e0f9-478f-81b5-167191f1976a","collapsed":false,"jupyter":{"outputs_hidden":false},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import shutil\nimport sacrebleu\n\ndef validate(model, task, criterion, log_to_wandb=True):\n    logger.info('begin validation')\n    itr = load_data_iterator(task, \"valid\", 1, config.max_tokens, config.num_workers).next_epoch_itr(shuffle=False)\n    \n    stats = {\"loss\":[], \"bleu\": 0, \"srcs\":[], \"hyps\":[], \"refs\":[]}\n    srcs = []\n    hyps = []\n    refs = []\n    \n    model.eval()\n    progress = tqdm.tqdm(itr, desc=f\"validation\", leave=False)\n    with torch.no_grad():\n        for i, sample in enumerate(progress):\n            # validation loss\n            sample = utils.move_to_cuda(sample, device=device)\n            net_output = model.forward(**sample[\"net_input\"])\n\n            lprobs = F.log_softmax(net_output[0], -1)\n            target = sample[\"target\"]\n            sample_size = sample[\"ntokens\"]\n            loss = criterion(lprobs.view(-1, lprobs.size(-1)), target.view(-1)) / sample_size\n            progress.set_postfix(valid_loss=loss.item())\n            stats[\"loss\"].append(loss)\n            \n            # do inference\n            s, h, r = inference_step(sample, model)\n            srcs.extend(s)\n            hyps.extend(h)\n            refs.extend(r)\n            \n    tok = 'zh' if task.cfg.target_lang == 'zh' else '13a'\n    stats[\"loss\"] = torch.stack(stats[\"loss\"]).mean().item()\n    stats[\"bleu\"] = sacrebleu.corpus_bleu(hyps, [refs], tokenize=tok) # 計算BLEU score\n    stats[\"srcs\"] = srcs\n    stats[\"hyps\"] = hyps\n    stats[\"refs\"] = refs\n    \n    if config.use_wandb and log_to_wandb:\n        wandb.log({\n            \"valid/loss\": stats[\"loss\"],\n            \"valid/bleu\": stats[\"bleu\"].score,\n        }, commit=False)\n    \n    showid = np.random.randint(len(hyps))\n    logger.info(\"example source: \" + srcs[showid])\n    logger.info(\"example hypothesis: \" + hyps[showid])\n    logger.info(\"example reference: \" + refs[showid])\n    \n    # show bleu results\n    logger.info(f\"validation loss:\\t{stats['loss']:.4f}\")\n    logger.info(stats[\"bleu\"].format())\n    return stats","metadata":{"_uuid":"c32ba532-01c2-4b0b-807d-7f0fb61f5d1f","_cell_guid":"80740000-99e4-43c3-b78b-4f5014ec92f1","collapsed":false,"jupyter":{"outputs_hidden":false},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"def validate_and_save(model, task, criterion, optimizer, epoch, save=True):   \n    stats = validate(model, task, criterion)\n    bleu = stats['bleu']\n    loss = stats['loss']\n    if save:\n        # save epoch checkpoints\n        savedir = Path(config.savedir).absolute()\n        savedir.mkdir(parents=True, exist_ok=True)\n        \n        check = {\n            \"model\": model.state_dict(),\n            \"stats\": {\"bleu\": bleu.score, \"loss\": loss},\n            \"optim\": {\"step\": optimizer._step}\n        }\n        torch.save(check, savedir/f\"checkpoint{epoch}.pt\")\n        shutil.copy(savedir/f\"checkpoint{epoch}.pt\", savedir/f\"checkpoint_last.pt\")\n        logger.info(f\"saved epoch checkpoint: {savedir}/checkpoint{epoch}.pt\")\n    \n        # save epoch samples\n        with open(savedir/f\"samples{epoch}.{config.source_lang}-{config.target_lang}.txt\", \"w\") as f:\n            for s, h in zip(stats[\"srcs\"], stats[\"hyps\"]):\n                f.write(f\"{s}\\t{h}\\n\")\n\n        # get best valid bleu    \n        if getattr(validate_and_save, \"best_bleu\", 0) < bleu.score:\n            validate_and_save.best_bleu = bleu.score\n            torch.save(check, savedir/f\"checkpoint_best.pt\")\n            \n        del_file = savedir / f\"checkpoint{epoch - config.keep_last_epochs}.pt\"\n        if del_file.exists():\n            del_file.unlink()\n    \n    return stats\n\ndef try_load_checkpoint(model, optimizer=None, name=None):\n    name = name if name else \"checkpoint_last.pt\"\n    checkpath = Path(config.savedir)/name\n    if checkpath.exists():\n        check = torch.load(checkpath)\n        model.load_state_dict(check[\"model\"])\n        stats = check[\"stats\"]\n        step = \"unknown\"\n        if optimizer != None:\n            optimizer._step = step = check[\"optim\"][\"step\"]\n        logger.info(f\"loaded checkpoint {checkpath}: step={step} loss={stats['loss']} bleu={stats['bleu']}\")\n    else:\n        logger.info(f\"no checkpoints found at {checkpath}!\")","metadata":{"_uuid":"d2529d56-02c9-4b5e-a295-c5064b604212","_cell_guid":"42a98de4-f864-40e0-9818-03fe25147143","collapsed":false,"jupyter":{"outputs_hidden":false},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"model = model.to(device=device)\ncriterion = criterion.to(device=device)","metadata":{"_uuid":"dd45dfc8-1dfd-4046-89b2-3697a640ed52","_cell_guid":"6ec4c554-189d-4c62-81ae-dad0306ea62f","collapsed":false,"jupyter":{"outputs_hidden":false},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"logger.info(\"task: {}\".format(task.__class__.__name__))\nlogger.info(\"encoder: {}\".format(model.encoder.__class__.__name__))\nlogger.info(\"decoder: {}\".format(model.decoder.__class__.__name__))\nlogger.info(\"criterion: {}\".format(criterion.__class__.__name__))\nlogger.info(\"optimizer: {}\".format(optimizer.__class__.__name__))\nlogger.info(\n    \"num. model params: {:,} (num. trained: {:,})\".format(\n        sum(p.numel() for p in model.parameters()),\n        sum(p.numel() for p in model.parameters() if p.requires_grad),\n    )\n)\nlogger.info(f\"max tokens per batch = {config.max_tokens}, accumulate steps = {config.accum_steps}\")","metadata":{"_uuid":"cac5d6a8-10f2-47ff-a14c-0aa5a765f28d","_cell_guid":"4a9a782a-e718-4108-b879-6c1905271e0b","collapsed":false,"jupyter":{"outputs_hidden":false},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"epoch_itr = load_data_iterator(task, \"train\", config.start_epoch, config.max_tokens, config.num_workers)\ntry_load_checkpoint(model, optimizer, name=config.resume)\nwhile epoch_itr.next_epoch_idx <= config.max_epoch:\n    # train for one epoch\n    train_one_epoch(epoch_itr, model, task, criterion, optimizer, config.accum_steps)\n    stats = validate_and_save(model, task, criterion, optimizer, epoch=epoch_itr.epoch)\n    logger.info(\"end of epoch {}\".format(epoch_itr.epoch))    \n    epoch_itr = load_data_iterator(task, \"train\", epoch_itr.next_epoch_idx, config.max_tokens, config.num_workers)","metadata":{"_uuid":"bf394524-e502-4908-9bb5-eda73849d8e6","_cell_guid":"f0cfc7fb-87ff-4665-89dc-11a6efcca282","collapsed":false,"jupyter":{"outputs_hidden":false},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# averaging a few checkpoints can have a similar effect to ensemble\ncheckdir=config.savedir\n!python ./fairseq/scripts/average_checkpoints.py \\\n--inputs {checkdir} \\\n--num-epoch-checkpoints 5 \\\n--output {checkdir}/avg_last_5_checkpoint.pt","metadata":{"_uuid":"57bb78de-134d-4d9c-ab6e-806d6e055f2f","_cell_guid":"c845cc23-2ab8-4283-8f4b-24d8a12a4a70","collapsed":false,"jupyter":{"outputs_hidden":false},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# checkpoint_last.pt : latest epoch\n# checkpoint_best.pt : highest validation bleu\n# avg_last_5_checkpoint.pt: the average of last 5 epochs\ntry_load_checkpoint(model, name=\"avg_last_5_checkpoint.pt\")\nvalidate(model, task, criterion, log_to_wandb=False)\nNone","metadata":{"_uuid":"c2ba8c9d-1b57-427b-abcd-81b65c55f975","_cell_guid":"d16d6880-b016-480e-8dd6-ec9221ed0d15","collapsed":false,"jupyter":{"outputs_hidden":false},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"def generate_prediction(model, task, split=\"test\", outfile=\"./prediction.txt\"):    \n    task.load_dataset(split=split, epoch=1)\n    itr = load_data_iterator(task, split, 1, config.max_tokens, config.num_workers).next_epoch_itr(shuffle=False)\n    \n    idxs = []\n    hyps = []\n\n    model.eval()\n    progress = tqdm.tqdm(itr, desc=f\"prediction\")\n    with torch.no_grad():\n        for i, sample in enumerate(progress):\n            # validation loss\n            sample = utils.move_to_cuda(sample, device=device)\n\n            # do inference\n            s, h, r = inference_step(sample, model)\n            \n            hyps.extend(h)\n            idxs.extend(list(sample['id']))\n            \n    # sort based on the order before preprocess\n    hyps = [x for _,x in sorted(zip(idxs,hyps))]\n    \n    with open(outfile, \"w\") as f:\n        for h in hyps:\n            f.write(h+\"\\n\")","metadata":{"_uuid":"7f7bd406-a12f-4c83-bd68-76ec1df9543b","_cell_guid":"b63b8672-a880-4b1a-aa3f-9b87754bcc4e","collapsed":false,"jupyter":{"outputs_hidden":false},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"generate_prediction(model, task)","metadata":{"_uuid":"25ff955a-d0bc-475d-a737-f7b7a77d4305","_cell_guid":"15315ed9-4474-4427-b17c-06b4a3d88503","collapsed":false,"jupyter":{"outputs_hidden":false},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"mono_dataset_name = 'mono'","metadata":{"_uuid":"c09e86e0-49bb-41ca-a1e5-e24882ece943","_cell_guid":"d1212d66-e925-4737-8952-83210a58baf5","collapsed":false,"jupyter":{"outputs_hidden":false},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"mono_prefix = Path(data_dir).absolute() / mono_dataset_name\nmono_prefix.mkdir(parents=True, exist_ok=True)\n\nurls = (\n    \"https://github.com/figisiwirf/ml2023-hw5-dataset/releases/download/v1.0.1/ted_zh_corpus.deduped.gz\",\n)\nfile_names = (\n    'ted_zh_corpus.deduped.gz',\n)\n\nfor u, f in zip(urls, file_names):\n    path = mono_prefix/f\n    if not path.exists():\n        !wget {u} -O {path}\n    else:\n        print(f'{f} is exist, skip downloading')\n    if path.suffix == \".tgz\":\n        !tar -xvf {path} -C {prefix}\n    elif path.suffix == \".zip\":\n        !unzip -o {path} -d {prefix}\n    elif path.suffix == \".gz\":\n        !gzip -fkd {path}","metadata":{"_uuid":"8d7d53f5-db81-4b38-bb10-8bd661283996","_cell_guid":"42642907-2fa1-4db4-85eb-56ca711eb496","collapsed":false,"jupyter":{"outputs_hidden":false},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# TODO: Clean corpus","metadata":{"_uuid":"4686c962-7950-4797-8872-9f06eb6eb0f7","_cell_guid":"3bbccf06-d52d-487a-9876-c16f27914d8b","trusted":true}},{"cell_type":"code","source":"def clean_mono_corpus(min_len = 1, max_len = 1000):\n    if Path(f'{mono_prefix}/mono.clean.zh').exsists():\n        print(\"File already exsists\")\n        return\n    with open(f'{mono_prefix}/mono.deduped', mode = 'r') as in_file:\n        with open(f\"{mono_prefix}/mono.clean.zh\", mode = 'w') as out_file:\n            for sentence in in_file:\n                sentence = in_file.readline().strip()\n                sentence = clean_s(sentence, 'zh')\n                sentence_len = len_s(sentence, 'zh')\n                \n                if sentence_len < min_len:\n                    continue\n                if sentence_len > max_len:\n                    continue\n                print(sentence, file = out_file)","metadata":{"_uuid":"ce066df2-9389-4651-95b5-34e326109778","_cell_guid":"0a0b0002-de47-4047-9834-6c4130c88fc9","collapsed":false,"jupyter":{"outputs_hidden":false},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# TODO: Subword units","metadata":{"_uuid":"01a355fb-90eb-446a-98cd-70b78ca0f1de","_cell_guid":"f9087553-0d90-456e-ac3e-20ceea3e6369","trusted":true}},{"cell_type":"code","source":"def sub_word_units():\n    spm_model = spm.SentencePieceProcessor(model_file = str(prefix/f'spm{vacab_size}.model'))\n    output_path = mono_prefix/'mono_tok.zh'\n    if output_path.exists():\n        print(f'{output_path} already exsist')\n        return\n    else:\n        with open(f\"{mono_prefix}/mono_tok.zh\", 'w') as out_f:\n            with open(f\"{mono_prefix}/mono.clean.zh\", 'r') as in_f:\n                for line in in_f:\n                    line = line.strip()\n                    tok = spm_model.encode(line, out_type=str)\n                    print(' '.join(tok), file=out_f)","metadata":{"_uuid":"119d9ac0-8cd1-40ec-9419-acb76ded7bdb","_cell_guid":"93bcb1bb-eabf-4290-9d9d-9b13aba583a9","collapsed":false,"jupyter":{"outputs_hidden":false},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"binpath = Path('./DATA/data-bin', mono_dataset_name)\nsrc_dict_file = './DATA/data-bin/ted2020/dict.en.txt'\ntgt_dict_file = src_dict_file\nmonopref = str(mono_prefix/\"mono.tok\") # whatever filepath you get after applying subword tokenization\nif binpath.exists():\n    print(binpath, \"exists, will not overwrite!\")\nelse:\n    !python -m fairseq_cli.preprocess\\\n        --source-lang 'zh'\\\n        --target-lang 'en'\\\n        --trainpref {monopref}\\\n        --destdir {binpath}\\\n        --srcdict {src_dict_file}\\\n        --tgtdict {tgt_dict_file}\\\n        --workers 2","metadata":{"_uuid":"bcba3a70-a373-4f0c-8669-c4304da00728","_cell_guid":"7cfaaeef-d13d-4137-a895-64252e5eaeba","collapsed":false,"jupyter":{"outputs_hidden":false},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# TODO: Generate synthetic data with backward model","metadata":{"_uuid":"97375c86-80a0-4465-ba8a-e04dee509ad2","_cell_guid":"f4c4cfea-2658-4646-b049-1d038d3a85ae","trusted":true}},{"cell_type":"code","source":"# Add binarized monolingual data to the original data directory, and name it with \"split_name\"\n# ex. ./DATA/data-bin/ted2020/\\[split_name\\].zh-en.\\[\"en\", \"zh\"\\].\\[\"bin\", \"idx\"\\]\n!cp ./DATA/data-bin/mono/train.zh-en.zh.bin ./DATA/data-bin/ted2020/mono.zh-en.zh.bin\n!cp ./DATA/data-bin/mono/train.zh-en.zh.idx ./DATA/data-bin/ted2020/mono.zh-en.zh.idx\n!cp ./DATA/data-bin/mono/train.zh-en.en.bin ./DATA/data-bin/ted2020/mono.zh-en.en.bin\n!cp ./DATA/data-bin/mono/train.zh-en.en.idx ./DATA/data-bin/ted2020/mono.zh-en.en.idx","metadata":{"_uuid":"378cbd67-a983-4095-825b-24948b323138","_cell_guid":"c0300f32-556b-452d-9445-e0e3ac4338b8","collapsed":false,"jupyter":{"outputs_hidden":false},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# hint: do prediction on split='mono' to create prediction_file\n# generate_prediction( ... ,split=... ,outfile=... )","metadata":{"_uuid":"bebe8c34-4dab-4cfc-b837-064c8bc831b5","_cell_guid":"124139f3-9ebc-4aaf-913f-e2a8a5857777","collapsed":false,"jupyter":{"outputs_hidden":false},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# TODO: Create new dataset","metadata":{"_uuid":"1a62de2b-3430-4c19-8e4b-d9c3dce2ac67","_cell_guid":"5f01e389-7a35-4503-b19d-77d8c3048b24","trusted":true}}]}
